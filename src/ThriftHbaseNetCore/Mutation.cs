/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



/// <summary>
/// A Mutation object is used to either update or delete a column-value.
/// </summary>
public partial class Mutation : TBase
{
  private bool _isDelete;
  private byte[] _column;
  private byte[] _value;
  private bool _writeToWAL;

  public bool IsDelete
  {
    get
    {
      return _isDelete;
    }
    set
    {
      __isset.isDelete = true;
      this._isDelete = value;
    }
  }

  public byte[] Column
  {
    get
    {
      return _column;
    }
    set
    {
      __isset.column = true;
      this._column = value;
    }
  }

  public byte[] Value
  {
    get
    {
      return _value;
    }
    set
    {
      __isset.@value = true;
      this._value = value;
    }
  }

  public bool WriteToWAL
  {
    get
    {
      return _writeToWAL;
    }
    set
    {
      __isset.writeToWAL = true;
      this._writeToWAL = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool isDelete;
    public bool column;
    public bool @value;
    public bool writeToWAL;
  }

  public Mutation()
  {
    this._isDelete = false;
    this.__isset.isDelete = true;
    this._writeToWAL = true;
    this.__isset.writeToWAL = true;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              IsDelete = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Column = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Value = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              WriteToWAL = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Mutation");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.isDelete)
      {
        field.Name = "isDelete";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsDelete, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Column != null && __isset.column)
      {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Column, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Value != null && __isset.@value)
      {
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Value, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.writeToWAL)
      {
        field.Name = "writeToWAL";
        field.Type = TType.Bool;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(WriteToWAL, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Mutation(");
    bool __first = true;
    if (__isset.isDelete)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IsDelete: ");
      sb.Append(IsDelete);
    }
    if (Column != null && __isset.column)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Column: ");
      sb.Append(Column);
    }
    if (Value != null && __isset.@value)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Value: ");
      sb.Append(Value);
    }
    if (__isset.writeToWAL)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("WriteToWAL: ");
      sb.Append(WriteToWAL);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

