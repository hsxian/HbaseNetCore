/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



/// <summary>
/// An Append object is used to specify the parameters for performing the append operation.
/// </summary>
public partial class TAppend : TBase
{
  private byte[] _table;
  private byte[] _row;
  private List<byte[]> _columns;
  private List<byte[]> _values;

  public byte[] Table
  {
    get
    {
      return _table;
    }
    set
    {
      __isset.table = true;
      this._table = value;
    }
  }

  public byte[] Row
  {
    get
    {
      return _row;
    }
    set
    {
      __isset.row = true;
      this._row = value;
    }
  }

  public List<byte[]> Columns
  {
    get
    {
      return _columns;
    }
    set
    {
      __isset.columns = true;
      this._columns = value;
    }
  }

  public List<byte[]> Values
  {
    get
    {
      return _values;
    }
    set
    {
      __isset.values = true;
      this._values = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool table;
    public bool row;
    public bool columns;
    public bool values;
  }

  public TAppend()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Table = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Row = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                Columns = new List<byte[]>();
                TList _list17 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  byte[] _elem19;
                  _elem19 = await iprot.ReadBinaryAsync(cancellationToken);
                  Columns.Add(_elem19);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                Values = new List<byte[]>();
                TList _list20 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  byte[] _elem22;
                  _elem22 = await iprot.ReadBinaryAsync(cancellationToken);
                  Values.Add(_elem22);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TAppend");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Table != null && __isset.table)
      {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Table, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Row != null && __isset.row)
      {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Row, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Columns != null && __isset.columns)
      {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
          foreach (byte[] _iter23 in Columns)
          {
            await oprot.WriteBinaryAsync(_iter23, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Values != null && __isset.values)
      {
        field.Name = "values";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Values.Count), cancellationToken);
          foreach (byte[] _iter24 in Values)
          {
            await oprot.WriteBinaryAsync(_iter24, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TAppend(");
    bool __first = true;
    if (Table != null && __isset.table)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Table: ");
      sb.Append(Table);
    }
    if (Row != null && __isset.row)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Row: ");
      sb.Append(Row);
    }
    if (Columns != null && __isset.columns)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Columns: ");
      sb.Append(Columns);
    }
    if (Values != null && __isset.values)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Values: ");
      sb.Append(Values);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

