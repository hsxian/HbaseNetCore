/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


public partial class Hbase
{
  public interface IAsync
  {
    /// <summary>
    /// Brings a table on-line (enables it)
    /// </summary>
    /// <param name="tableName">name of the table</param>
    Task enableTableAsync(byte[] tableName, CancellationToken cancellationToken);

    /// <summary>
    /// Disables a table (takes it off-line) If it is being served, the master
    /// will tell the servers to stop serving it.
    /// </summary>
    /// <param name="tableName">name of the table</param>
    Task disableTableAsync(byte[] tableName, CancellationToken cancellationToken);

    /// <summary>
    /// @return true if table is on-line
    /// </summary>
    /// <param name="tableName">name of the table to check</param>
    Task<bool> isTableEnabledAsync(byte[] tableName, CancellationToken cancellationToken);

    Task compactAsync(byte[] tableNameOrRegionName, CancellationToken cancellationToken);

    Task majorCompactAsync(byte[] tableNameOrRegionName, CancellationToken cancellationToken);

    /// <summary>
    /// List all the userspace tables.
    /// 
    /// @return returns a list of names
    /// </summary>
    Task<List<byte[]>> getTableNamesAsync(CancellationToken cancellationToken);

    /// <summary>
    /// List all the column families assoicated with a table.
    /// 
    /// @return list of column family descriptors
    /// </summary>
    /// <param name="tableName">table name</param>
    Task<Dictionary<byte[], ColumnDescriptor>> getColumnDescriptorsAsync(byte[] tableName, CancellationToken cancellationToken);

    /// <summary>
    /// List the regions associated with a table.
    /// 
    /// @return list of region descriptors
    /// </summary>
    /// <param name="tableName">table name</param>
    Task<List<TRegionInfo>> getTableRegionsAsync(byte[] tableName, CancellationToken cancellationToken);

    /// <summary>
    /// Create a table with the specified column families.  The name
    /// field for each ColumnDescriptor must be set and must end in a
    /// colon (:). All other fields are optional and will get default
    /// values if not explicitly specified.
    /// 
    /// @throws IllegalArgument if an input parameter is invalid
    /// 
    /// @throws AlreadyExists if the table name already exists
    /// </summary>
    /// <param name="tableName">name of table to create</param>
    /// <param name="columnFamilies">list of column family descriptors</param>
    Task createTableAsync(byte[] tableName, List<ColumnDescriptor> columnFamilies, CancellationToken cancellationToken);

    /// <summary>
    /// Deletes a table
    /// 
    /// @throws IOError if table doesn't exist on server or there was some other
    /// problem
    /// </summary>
    /// <param name="tableName">name of table to delete</param>
    Task deleteTableAsync(byte[] tableName, CancellationToken cancellationToken);

    /// <summary>
    /// Get a single TCell for the specified table, row, and column at the
    /// latest timestamp. Returns an empty list if no such value exists.
    /// 
    /// @return value for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TCell>> @getAsync(byte[] tableName, byte[] row, byte[] column, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get the specified number of versions for the specified table,
    /// row, and column.
    /// 
    /// @return list of cells for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="numVersions">number of versions to retrieve</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TCell>> getVerAsync(byte[] tableName, byte[] row, byte[] column, int numVersions, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get the specified number of versions for the specified table,
    /// row, and column.  Only versions less than or equal to the specified
    /// timestamp will be returned.
    /// 
    /// @return list of cells for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="numVersions">number of versions to retrieve</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TCell>> getVerTsAsync(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the data for the specified table and row at the latest
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowAsync(byte[] tableName, byte[] row, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get the specified columns for the specified table and row at the latest
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowWithColumnsAsync(byte[] tableName, byte[] row, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the data for the specified table and row at the specified
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of the table</param>
    /// <param name="row">row key</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowTsAsync(byte[] tableName, byte[] row, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get the specified columns for the specified table and row at the specified
    /// timestamp. Returns an empty list if the row does not exist.
    /// 
    /// @return TRowResult containing the row and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="timestamp"></param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowWithColumnsTsAsync(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the data for the specified table and rows at the latest
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowsAsync(byte[] tableName, List<byte[]> rows, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get the specified columns for the specified table and rows at the latest
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowsWithColumnsAsync(byte[] tableName, List<byte[]> rows, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get all the data for the specified table and rows at the specified
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of the table</param>
    /// <param name="rows">row keys</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowsTsAsync(byte[] tableName, List<byte[]> rows, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get the specified columns for the specified table and rows at the specified
    /// timestamp. Returns an empty list if no rows exist.
    /// 
    /// @return TRowResult containing the rows and map of columns to TCells
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rows">row keys</param>
    /// <param name="columns">List of columns to return, null for all columns</param>
    /// <param name="timestamp"></param>
    /// <param name="attributes">Get attributes</param>
    Task<List<TRowResult>> getRowsWithColumnsTsAsync(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Apply a series of mutations (updates/deletes) to a row in a
    /// single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  Default current timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="mutations">list of mutation commands</param>
    /// <param name="attributes">Mutation attributes</param>
    Task mutateRowAsync(byte[] tableName, byte[] row, List<Mutation> mutations, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Apply a series of mutations (updates/deletes) to a row in a
    /// single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  The specified timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="mutations">list of mutation commands</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Mutation attributes</param>
    Task mutateRowTsAsync(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Apply a series of batches (each a series of mutations on a single row)
    /// in a single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  Default current timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rowBatches">list of row batches</param>
    /// <param name="attributes">Mutation attributes</param>
    Task mutateRowsAsync(byte[] tableName, List<BatchMutation> rowBatches, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Apply a series of batches (each a series of mutations on a single row)
    /// in a single transaction.  If an exception is thrown, then the
    /// transaction is aborted.  The specified timestamp is used, and
    /// all entries will have an identical timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="rowBatches">list of row batches</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Mutation attributes</param>
    Task mutateRowsTsAsync(byte[] tableName, List<BatchMutation> rowBatches, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Atomically increment the column value specified.  Returns the next value post increment.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row to increment</param>
    /// <param name="column">name of column</param>
    /// <param name="value">amount to increment by</param>
    Task<long> atomicIncrementAsync(byte[] tableName, byte[] row, byte[] column, long @value, CancellationToken cancellationToken);

    /// <summary>
    /// Delete all cells that match the passed row and column.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">Row to update</param>
    /// <param name="column">name of column whose value is to be deleted</param>
    /// <param name="attributes">Delete attributes</param>
    Task deleteAllAsync(byte[] tableName, byte[] row, byte[] column, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Delete all cells that match the passed row and column and whose
    /// timestamp is equal-to or older than the passed timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">Row to update</param>
    /// <param name="column">name of column whose value is to be deleted</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Delete attributes</param>
    Task deleteAllTsAsync(byte[] tableName, byte[] row, byte[] column, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Completely delete the row's cells.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">key of the row to be completely deleted.</param>
    /// <param name="attributes">Delete attributes</param>
    Task deleteAllRowAsync(byte[] tableName, byte[] row, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Increment a cell by the ammount.
    /// Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
    /// False is the default.  Turn to true if you need the extra performance and can accept some
    /// data loss if a thrift server dies with increments still in the queue.
    /// </summary>
    /// <param name="increment">The single increment to apply</param>
    Task incrementAsync(TIncrement increment, CancellationToken cancellationToken);

    Task incrementRowsAsync(List<TIncrement> increments, CancellationToken cancellationToken);

    /// <summary>
    /// Completely delete the row's cells marked with a timestamp
    /// equal-to or older than the passed timestamp.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">key of the row to be completely deleted.</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Delete attributes</param>
    Task deleteAllRowTsAsync(byte[] tableName, byte[] row, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get a scanner on the current table, using the Scan instance
    /// for the scan parameters.
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="scan">Scan instance</param>
    /// <param name="attributes">Scan attributes</param>
    Task<int> scannerOpenWithScanAsync(byte[] tableName, TScan scan, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get a scanner on the current table starting at the specified row and
    /// ending at the last row in the table.  Return the specified columns.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="attributes">Scan attributes</param>
    Task<int> scannerOpenAsync(byte[] tableName, byte[] startRow, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get a scanner on the current table starting and stopping at the
    /// specified rows.  ending at the last row in the table.  Return the
    /// specified columns.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="stopRow">row to stop scanning on. This row is *not* included in thescanner's results</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="attributes">Scan attributes</param>
    Task<int> scannerOpenWithStopAsync(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Open a scanner for a given prefix.  That is all rows will have the specified
    /// prefix. No other rows will be returned.
    /// 
    /// @return scanner id to use with other scanner calls
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startAndPrefix">the prefix (and thus start row) of the keys you want</param>
    /// <param name="columns">the columns you want returned</param>
    /// <param name="attributes">Scan attributes</param>
    Task<int> scannerOpenWithPrefixAsync(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get a scanner on the current table starting at the specified row and
    /// ending at the last row in the table.  Return the specified columns.
    /// Only values with the specified timestamp are returned.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Scan attributes</param>
    Task<int> scannerOpenTsAsync(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Get a scanner on the current table starting and stopping at the
    /// specified rows.  ending at the last row in the table.  Return the
    /// specified columns.  Only values with the specified timestamp are
    /// returned.
    /// 
    /// @return scanner id to be used with other scanner procedures
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="startRow">Starting row in table to scan.Send "" (empty string) to start at the first row.</param>
    /// <param name="stopRow">row to stop scanning on. This row is *not* included in thescanner's results</param>
    /// <param name="columns">columns to scan. If column name is a column family, allcolumns of the specified column family are returned. It's also possibleto pass a regex in the column qualifier.</param>
    /// <param name="timestamp">timestamp</param>
    /// <param name="attributes">Scan attributes</param>
    Task<int> scannerOpenWithStopTsAsync(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

    /// <summary>
    /// Returns the scanner's current row value and advances to the next
    /// row in the table.  When there are no more rows in the table, or a key
    /// greater-than-or-equal-to the scanner's specified stopRow is reached,
    /// an empty list is returned.
    /// 
    /// @return a TRowResult containing the current row and a map of the columns to TCells.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// 
    /// @throws NotFound when the scanner reaches the end
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    Task<List<TRowResult>> scannerGetAsync(int id, CancellationToken cancellationToken);

    /// <summary>
    /// Returns, starting at the scanner's current row value nbRows worth of
    /// rows and advances to the next row in the table.  When there are no more
    /// rows in the table, or a key greater-than-or-equal-to the scanner's
    /// specified stopRow is reached,  an empty list is returned.
    /// 
    /// @return a TRowResult containing the current row and a map of the columns to TCells.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// 
    /// @throws NotFound when the scanner reaches the end
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    /// <param name="nbRows">number of results to return</param>
    Task<List<TRowResult>> scannerGetListAsync(int id, int nbRows, CancellationToken cancellationToken);

    /// <summary>
    /// Closes the server-state associated with an open scanner.
    /// 
    /// @throws IllegalArgument if ScannerID is invalid
    /// </summary>
    /// <param name="id">id of a scanner returned by scannerOpen</param>
    Task scannerCloseAsync(int id, CancellationToken cancellationToken);

    /// <summary>
    /// Get the row just before the specified one.
    /// 
    /// @return value for specified row/column
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="family">column name</param>
    Task<List<TCell>> getRowOrBeforeAsync(byte[] tableName, byte[] row, byte[] family, CancellationToken cancellationToken);

    /// <summary>
    /// Get the regininfo for the specified row. It scans
    /// the metatable to find region's start and end keys.
    /// 
    /// @return value for specified row/column
    /// </summary>
    /// <param name="row">row key</param>
    Task<TRegionInfo> getRegionInfoAsync(byte[] row, CancellationToken cancellationToken);

    /// <summary>
    /// Appends values to one or more columns within a single row.
    /// 
    /// @return values of columns after the append operation.
    /// </summary>
    /// <param name="append">The single append operation to apply</param>
    Task<List<TCell>> appendAsync(TAppend append, CancellationToken cancellationToken);

    /// <summary>
    /// Atomically checks if a row/family/qualifier value matches the expected
    /// value. If it does, it adds the corresponding mutation operation for put.
    /// 
    /// @return true if the new put was executed, false otherwise
    /// </summary>
    /// <param name="tableName">name of table</param>
    /// <param name="row">row key</param>
    /// <param name="column">column name</param>
    /// <param name="value">the expected value for the column parameter, if notprovided the check is for the non-existence of thecolumn in question</param>
    /// <param name="mput">mutation for the put</param>
    /// <param name="attributes">Mutation attributes</param>
    Task<bool> checkAndPutAsync(byte[] tableName, byte[] row, byte[] column, byte[] @value, Mutation mput, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)    {
    }
    public async Task enableTableAsync(byte[] tableName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("enableTable", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new enableTableArgs();
      args.TableName = tableName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new enableTableResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task disableTableAsync(byte[] tableName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("disableTable", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new disableTableArgs();
      args.TableName = tableName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new disableTableResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task<bool> isTableEnabledAsync(byte[] tableName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("isTableEnabled", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new isTableEnabledArgs();
      args.TableName = tableName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new isTableEnabledResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isTableEnabled failed: unknown result");
    }

    public async Task compactAsync(byte[] tableNameOrRegionName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new compactArgs();
      args.TableNameOrRegionName = tableNameOrRegionName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new compactResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task majorCompactAsync(byte[] tableNameOrRegionName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("majorCompact", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new majorCompactArgs();
      args.TableNameOrRegionName = tableNameOrRegionName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new majorCompactResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task<List<byte[]>> getTableNamesAsync(CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTableNames", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getTableNamesArgs();
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getTableNamesResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTableNames failed: unknown result");
    }

    public async Task<Dictionary<byte[], ColumnDescriptor>> getColumnDescriptorsAsync(byte[] tableName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getColumnDescriptors", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getColumnDescriptorsArgs();
      args.TableName = tableName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getColumnDescriptorsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getColumnDescriptors failed: unknown result");
    }

    public async Task<List<TRegionInfo>> getTableRegionsAsync(byte[] tableName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTableRegions", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getTableRegionsArgs();
      args.TableName = tableName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getTableRegionsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTableRegions failed: unknown result");
    }

    public async Task createTableAsync(byte[] tableName, List<ColumnDescriptor> columnFamilies, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("createTable", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new createTableArgs();
      args.TableName = tableName;
      args.ColumnFamilies = columnFamilies;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new createTableResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      if (result.__isset.exist)
      {
        throw result.Exist;
      }
      return;
    }

    public async Task deleteTableAsync(byte[] tableName, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteTable", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new deleteTableArgs();
      args.TableName = tableName;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new deleteTableResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task<List<TCell>> @getAsync(byte[] tableName, byte[] row, byte[] column, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("get", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
    }

    public async Task<List<TCell>> getVerAsync(byte[] tableName, byte[] row, byte[] column, int numVersions, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getVer", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getVerArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.NumVersions = numVersions;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getVerResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVer failed: unknown result");
    }

    public async Task<List<TCell>> getVerTsAsync(byte[] tableName, byte[] row, byte[] column, long timestamp, int numVersions, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getVerTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getVerTsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Timestamp = timestamp;
      args.NumVersions = numVersions;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getVerTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getVerTs failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowAsync(byte[] tableName, byte[] row, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRow", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRow failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowWithColumnsAsync(byte[] tableName, byte[] row, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowWithColumns", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowWithColumnsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Columns = columns;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowWithColumnsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowWithColumns failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowTsAsync(byte[] tableName, byte[] row, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowTsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowTs failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowWithColumnsTsAsync(byte[] tableName, byte[] row, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowWithColumnsTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowWithColumnsTsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowWithColumnsTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowWithColumnsTs failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowsAsync(byte[] tableName, List<byte[]> rows, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRows", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowsArgs();
      args.TableName = tableName;
      args.Rows = rows;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRows failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowsWithColumnsAsync(byte[] tableName, List<byte[]> rows, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowsWithColumns", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowsWithColumnsArgs();
      args.TableName = tableName;
      args.Rows = rows;
      args.Columns = columns;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowsWithColumnsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowsWithColumns failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowsTsAsync(byte[] tableName, List<byte[]> rows, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowsTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowsTsArgs();
      args.TableName = tableName;
      args.Rows = rows;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowsTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowsTs failed: unknown result");
    }

    public async Task<List<TRowResult>> getRowsWithColumnsTsAsync(byte[] tableName, List<byte[]> rows, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowsWithColumnsTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowsWithColumnsTsArgs();
      args.TableName = tableName;
      args.Rows = rows;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowsWithColumnsTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowsWithColumnsTs failed: unknown result");
    }

    public async Task mutateRowAsync(byte[] tableName, byte[] row, List<Mutation> mutations, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mutateRow", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new mutateRowArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Mutations = mutations;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new mutateRowResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      return;
    }

    public async Task mutateRowTsAsync(byte[] tableName, byte[] row, List<Mutation> mutations, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mutateRowTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new mutateRowTsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Mutations = mutations;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new mutateRowTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      return;
    }

    public async Task mutateRowsAsync(byte[] tableName, List<BatchMutation> rowBatches, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mutateRows", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new mutateRowsArgs();
      args.TableName = tableName;
      args.RowBatches = rowBatches;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new mutateRowsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      return;
    }

    public async Task mutateRowsTsAsync(byte[] tableName, List<BatchMutation> rowBatches, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mutateRowsTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new mutateRowsTsArgs();
      args.TableName = tableName;
      args.RowBatches = rowBatches;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new mutateRowsTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      return;
    }

    public async Task<long> atomicIncrementAsync(byte[] tableName, byte[] row, byte[] column, long @value, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("atomicIncrement", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new atomicIncrementArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Value = @value;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new atomicIncrementResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "atomicIncrement failed: unknown result");
    }

    public async Task deleteAllAsync(byte[] tableName, byte[] row, byte[] column, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteAll", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new deleteAllArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new deleteAllResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task deleteAllTsAsync(byte[] tableName, byte[] row, byte[] column, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteAllTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new deleteAllTsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new deleteAllTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task deleteAllRowAsync(byte[] tableName, byte[] row, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteAllRow", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new deleteAllRowArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new deleteAllRowResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task incrementAsync(TIncrement increment, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("increment", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new incrementArgs();
      args.Increment = increment;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new incrementResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task incrementRowsAsync(List<TIncrement> increments, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("incrementRows", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new incrementRowsArgs();
      args.Increments = increments;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new incrementRowsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task deleteAllRowTsAsync(byte[] tableName, byte[] row, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("deleteAllRowTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new deleteAllRowTsArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new deleteAllRowTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      return;
    }

    public async Task<int> scannerOpenWithScanAsync(byte[] tableName, TScan scan, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerOpenWithScan", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerOpenWithScanArgs();
      args.TableName = tableName;
      args.Scan = scan;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerOpenWithScanResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithScan failed: unknown result");
    }

    public async Task<int> scannerOpenAsync(byte[] tableName, byte[] startRow, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerOpen", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerOpenArgs();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.Columns = columns;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerOpenResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpen failed: unknown result");
    }

    public async Task<int> scannerOpenWithStopAsync(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerOpenWithStop", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerOpenWithStopArgs();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.StopRow = stopRow;
      args.Columns = columns;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerOpenWithStopResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithStop failed: unknown result");
    }

    public async Task<int> scannerOpenWithPrefixAsync(byte[] tableName, byte[] startAndPrefix, List<byte[]> columns, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerOpenWithPrefix", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerOpenWithPrefixArgs();
      args.TableName = tableName;
      args.StartAndPrefix = startAndPrefix;
      args.Columns = columns;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerOpenWithPrefixResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithPrefix failed: unknown result");
    }

    public async Task<int> scannerOpenTsAsync(byte[] tableName, byte[] startRow, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerOpenTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerOpenTsArgs();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerOpenTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenTs failed: unknown result");
    }

    public async Task<int> scannerOpenWithStopTsAsync(byte[] tableName, byte[] startRow, byte[] stopRow, List<byte[]> columns, long timestamp, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerOpenWithStopTs", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerOpenWithStopTsArgs();
      args.TableName = tableName;
      args.StartRow = startRow;
      args.StopRow = stopRow;
      args.Columns = columns;
      args.Timestamp = timestamp;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerOpenWithStopTsResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerOpenWithStopTs failed: unknown result");
    }

    public async Task<List<TRowResult>> scannerGetAsync(int id, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerGet", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerGetArgs();
      args.Id = id;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerGetResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerGet failed: unknown result");
    }

    public async Task<List<TRowResult>> scannerGetListAsync(int id, int nbRows, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerGetList", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerGetListArgs();
      args.Id = id;
      args.NbRows = nbRows;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerGetListResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scannerGetList failed: unknown result");
    }

    public async Task scannerCloseAsync(int id, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scannerClose", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new scannerCloseArgs();
      args.Id = id;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new scannerCloseResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      return;
    }

    public async Task<List<TCell>> getRowOrBeforeAsync(byte[] tableName, byte[] row, byte[] family, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRowOrBefore", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRowOrBeforeArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Family = family;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRowOrBeforeResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRowOrBefore failed: unknown result");
    }

    public async Task<TRegionInfo> getRegionInfoAsync(byte[] row, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("getRegionInfo", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new getRegionInfoArgs();
      args.Row = row;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new getRegionInfoResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRegionInfo failed: unknown result");
    }

    public async Task<List<TCell>> appendAsync(TAppend append, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("append", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new appendArgs();
      args.Append = append;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new appendResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append failed: unknown result");
    }

    public async Task<bool> checkAndPutAsync(byte[] tableName, byte[] row, byte[] column, byte[] @value, Mutation mput, Dictionary<byte[], byte[]> attributes, CancellationToken cancellationToken)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("checkAndPut", TMessageType.Call, SeqId), cancellationToken);
      
      var args = new checkAndPutArgs();
      args.TableName = tableName;
      args.Row = row;
      args.Column = column;
      args.Value = @value;
      args.Mput = mput;
      args.Attributes = attributes;
      
      await args.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
      
      var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (msg.Type == TMessageType.Exception)
      {
        var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw x;
      }

      var result = new checkAndPutResult();
      await result.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (result.__isset.success)
      {
        return result.Success;
      }
      if (result.__isset.io)
      {
        throw result.Io;
      }
      if (result.__isset.ia)
      {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndPut failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private IAsync _iAsync;

    public AsyncProcessor(IAsync iAsync)
    {
      if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

      _iAsync = iAsync;
      processMap_["enableTable"] = enableTable_ProcessAsync;
      processMap_["disableTable"] = disableTable_ProcessAsync;
      processMap_["isTableEnabled"] = isTableEnabled_ProcessAsync;
      processMap_["compact"] = compact_ProcessAsync;
      processMap_["majorCompact"] = majorCompact_ProcessAsync;
      processMap_["getTableNames"] = getTableNames_ProcessAsync;
      processMap_["getColumnDescriptors"] = getColumnDescriptors_ProcessAsync;
      processMap_["getTableRegions"] = getTableRegions_ProcessAsync;
      processMap_["createTable"] = createTable_ProcessAsync;
      processMap_["deleteTable"] = deleteTable_ProcessAsync;
      processMap_["get"] = get_ProcessAsync;
      processMap_["getVer"] = getVer_ProcessAsync;
      processMap_["getVerTs"] = getVerTs_ProcessAsync;
      processMap_["getRow"] = getRow_ProcessAsync;
      processMap_["getRowWithColumns"] = getRowWithColumns_ProcessAsync;
      processMap_["getRowTs"] = getRowTs_ProcessAsync;
      processMap_["getRowWithColumnsTs"] = getRowWithColumnsTs_ProcessAsync;
      processMap_["getRows"] = getRows_ProcessAsync;
      processMap_["getRowsWithColumns"] = getRowsWithColumns_ProcessAsync;
      processMap_["getRowsTs"] = getRowsTs_ProcessAsync;
      processMap_["getRowsWithColumnsTs"] = getRowsWithColumnsTs_ProcessAsync;
      processMap_["mutateRow"] = mutateRow_ProcessAsync;
      processMap_["mutateRowTs"] = mutateRowTs_ProcessAsync;
      processMap_["mutateRows"] = mutateRows_ProcessAsync;
      processMap_["mutateRowsTs"] = mutateRowsTs_ProcessAsync;
      processMap_["atomicIncrement"] = atomicIncrement_ProcessAsync;
      processMap_["deleteAll"] = deleteAll_ProcessAsync;
      processMap_["deleteAllTs"] = deleteAllTs_ProcessAsync;
      processMap_["deleteAllRow"] = deleteAllRow_ProcessAsync;
      processMap_["increment"] = increment_ProcessAsync;
      processMap_["incrementRows"] = incrementRows_ProcessAsync;
      processMap_["deleteAllRowTs"] = deleteAllRowTs_ProcessAsync;
      processMap_["scannerOpenWithScan"] = scannerOpenWithScan_ProcessAsync;
      processMap_["scannerOpen"] = scannerOpen_ProcessAsync;
      processMap_["scannerOpenWithStop"] = scannerOpenWithStop_ProcessAsync;
      processMap_["scannerOpenWithPrefix"] = scannerOpenWithPrefix_ProcessAsync;
      processMap_["scannerOpenTs"] = scannerOpenTs_ProcessAsync;
      processMap_["scannerOpenWithStopTs"] = scannerOpenWithStopTs_ProcessAsync;
      processMap_["scannerGet"] = scannerGet_ProcessAsync;
      processMap_["scannerGetList"] = scannerGetList_ProcessAsync;
      processMap_["scannerClose"] = scannerClose_ProcessAsync;
      processMap_["getRowOrBefore"] = getRowOrBefore_ProcessAsync;
      processMap_["getRegionInfo"] = getRegionInfo_ProcessAsync;
      processMap_["append"] = append_ProcessAsync;
      processMap_["checkAndPut"] = checkAndPut_ProcessAsync;
    }

    protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async Task enableTable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new enableTableArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new enableTableResult();
      try
      {
        try
        {
          await _iAsync.enableTableAsync(args.TableName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("enableTable", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("enableTable", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task disableTable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new disableTableArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new disableTableResult();
      try
      {
        try
        {
          await _iAsync.disableTableAsync(args.TableName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("disableTable", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("disableTable", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task isTableEnabled_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new isTableEnabledArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new isTableEnabledResult();
      try
      {
        try
        {
          result.Success = await _iAsync.isTableEnabledAsync(args.TableName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("isTableEnabled", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("isTableEnabled", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task compact_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new compactArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new compactResult();
      try
      {
        try
        {
          await _iAsync.compactAsync(args.TableNameOrRegionName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task majorCompact_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new majorCompactArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new majorCompactResult();
      try
      {
        try
        {
          await _iAsync.majorCompactAsync(args.TableNameOrRegionName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("majorCompact", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("majorCompact", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getTableNames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getTableNamesArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getTableNamesResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getTableNamesAsync(cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getTableNames", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getTableNames", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getColumnDescriptors_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getColumnDescriptorsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getColumnDescriptorsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getColumnDescriptorsAsync(args.TableName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getColumnDescriptors", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getColumnDescriptors", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getTableRegions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getTableRegionsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getTableRegionsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getTableRegionsAsync(args.TableName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getTableRegions", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getTableRegions", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task createTable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new createTableArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new createTableResult();
      try
      {
        try
        {
          await _iAsync.createTableAsync(args.TableName, args.ColumnFamilies, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        catch (AlreadyExists exist)
        {
          result.Exist = exist;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("createTable", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("createTable", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task deleteTable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new deleteTableArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new deleteTableResult();
      try
      {
        try
        {
          await _iAsync.deleteTableAsync(args.TableName, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("deleteTable", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteTable", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task get_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getResult();
      try
      {
        try
        {
          result.Success = await _iAsync.@getAsync(args.TableName, args.Row, args.Column, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("get", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("get", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getVer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getVerArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getVerResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getVerAsync(args.TableName, args.Row, args.Column, args.NumVersions, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getVer", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getVer", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getVerTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getVerTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getVerTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getVerTsAsync(args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getVerTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getVerTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowAsync(args.TableName, args.Row, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRow", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRow", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowWithColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowWithColumnsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowWithColumnsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowWithColumnsAsync(args.TableName, args.Row, args.Columns, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowWithColumns", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowWithColumns", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowTsAsync(args.TableName, args.Row, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowWithColumnsTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowWithColumnsTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowWithColumnsTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowWithColumnsTsAsync(args.TableName, args.Row, args.Columns, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowWithColumnsTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowWithColumnsTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowsAsync(args.TableName, args.Rows, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRows", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRows", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowsWithColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowsWithColumnsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowsWithColumnsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowsWithColumnsAsync(args.TableName, args.Rows, args.Columns, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowsWithColumns", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowsWithColumns", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowsTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowsTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowsTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowsTsAsync(args.TableName, args.Rows, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowsTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowsTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowsWithColumnsTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowsWithColumnsTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowsWithColumnsTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowsWithColumnsTsAsync(args.TableName, args.Rows, args.Columns, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowsWithColumnsTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowsWithColumnsTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task mutateRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new mutateRowArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new mutateRowResult();
      try
      {
        try
        {
          await _iAsync.mutateRowAsync(args.TableName, args.Row, args.Mutations, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRow", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRow", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task mutateRowTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new mutateRowTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new mutateRowTsResult();
      try
      {
        try
        {
          await _iAsync.mutateRowTsAsync(args.TableName, args.Row, args.Mutations, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRowTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRowTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task mutateRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new mutateRowsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new mutateRowsResult();
      try
      {
        try
        {
          await _iAsync.mutateRowsAsync(args.TableName, args.RowBatches, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRows", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRows", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task mutateRowsTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new mutateRowsTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new mutateRowsTsResult();
      try
      {
        try
        {
          await _iAsync.mutateRowsTsAsync(args.TableName, args.RowBatches, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRowsTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mutateRowsTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task atomicIncrement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new atomicIncrementArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new atomicIncrementResult();
      try
      {
        try
        {
          result.Success = await _iAsync.atomicIncrementAsync(args.TableName, args.Row, args.Column, args.Value, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("atomicIncrement", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("atomicIncrement", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task deleteAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new deleteAllArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new deleteAllResult();
      try
      {
        try
        {
          await _iAsync.deleteAllAsync(args.TableName, args.Row, args.Column, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAll", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAll", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task deleteAllTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new deleteAllTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new deleteAllTsResult();
      try
      {
        try
        {
          await _iAsync.deleteAllTsAsync(args.TableName, args.Row, args.Column, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAllTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAllTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task deleteAllRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new deleteAllRowArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new deleteAllRowResult();
      try
      {
        try
        {
          await _iAsync.deleteAllRowAsync(args.TableName, args.Row, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAllRow", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAllRow", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task increment_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new incrementArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new incrementResult();
      try
      {
        try
        {
          await _iAsync.incrementAsync(args.Increment, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("increment", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("increment", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task incrementRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new incrementRowsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new incrementRowsResult();
      try
      {
        try
        {
          await _iAsync.incrementRowsAsync(args.Increments, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("incrementRows", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("incrementRows", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task deleteAllRowTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new deleteAllRowTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new deleteAllRowTsResult();
      try
      {
        try
        {
          await _iAsync.deleteAllRowTsAsync(args.TableName, args.Row, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAllRowTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("deleteAllRowTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerOpenWithScan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerOpenWithScanArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerOpenWithScanResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerOpenWithScanAsync(args.TableName, args.Scan, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithScan", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithScan", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerOpen_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerOpenArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerOpenResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerOpenAsync(args.TableName, args.StartRow, args.Columns, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpen", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpen", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerOpenWithStop_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerOpenWithStopArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerOpenWithStopResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerOpenWithStopAsync(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithStop", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithStop", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerOpenWithPrefix_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerOpenWithPrefixArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerOpenWithPrefixResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerOpenWithPrefixAsync(args.TableName, args.StartAndPrefix, args.Columns, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithPrefix", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithPrefix", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerOpenTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerOpenTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerOpenTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerOpenTsAsync(args.TableName, args.StartRow, args.Columns, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerOpenWithStopTs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerOpenWithStopTsArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerOpenWithStopTsResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerOpenWithStopTsAsync(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithStopTs", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerOpenWithStopTs", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerGet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerGetArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerGetResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerGetAsync(args.Id, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerGet", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerGet", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerGetList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerGetListArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerGetListResult();
      try
      {
        try
        {
          result.Success = await _iAsync.scannerGetListAsync(args.Id, args.NbRows, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerGetList", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerGetList", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task scannerClose_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new scannerCloseArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new scannerCloseResult();
      try
      {
        try
        {
          await _iAsync.scannerCloseAsync(args.Id, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scannerClose", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scannerClose", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRowOrBefore_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRowOrBeforeArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRowOrBeforeResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRowOrBeforeAsync(args.TableName, args.Row, args.Family, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRowOrBefore", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRowOrBefore", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task getRegionInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new getRegionInfoArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new getRegionInfoResult();
      try
      {
        try
        {
          result.Success = await _iAsync.getRegionInfoAsync(args.Row, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("getRegionInfo", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("getRegionInfo", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task append_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new appendArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new appendResult();
      try
      {
        try
        {
          result.Success = await _iAsync.appendAsync(args.Append, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("append", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("append", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async Task checkAndPut_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var args = new checkAndPutArgs();
      await args.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var result = new checkAndPutResult();
      try
      {
        try
        {
          result.Success = await _iAsync.checkAndPutAsync(args.TableName, args.Row, args.Column, args.Value, args.Mput, args.Attributes, cancellationToken);
        }
        catch (IOError io)
        {
          result.Io = io;
        }
        catch (IllegalArgument ia)
        {
          result.Ia = ia;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("checkAndPut", TMessageType.Reply, seqid), cancellationToken); 
        await result.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("checkAndPut", TMessageType.Exception, seqid), cancellationToken);
        await x.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }


  public partial class enableTableArgs : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
    }

    public enableTableArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("enableTable_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("enableTable_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class enableTableResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public enableTableResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("enableTable_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("enableTable_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class disableTableArgs : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
    }

    public disableTableArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("disableTable_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("disableTable_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class disableTableResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public disableTableResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("disableTable_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("disableTable_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class isTableEnabledArgs : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of the table to check
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
    }

    public isTableEnabledArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("isTableEnabled_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("isTableEnabled_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class isTableEnabledResult : TBase
  {
    private bool _success;
    private IOError _io;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public isTableEnabledResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("isTableEnabled_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("isTableEnabled_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class compactArgs : TBase
  {
    private byte[] _tableNameOrRegionName;

    public byte[] TableNameOrRegionName
    {
      get
      {
        return _tableNameOrRegionName;
      }
      set
      {
        __isset.tableNameOrRegionName = true;
        this._tableNameOrRegionName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableNameOrRegionName;
    }

    public compactArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableNameOrRegionName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("compact_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableNameOrRegionName != null && __isset.tableNameOrRegionName)
        {
          field.Name = "tableNameOrRegionName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableNameOrRegionName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("compact_args(");
      bool __first = true;
      if (TableNameOrRegionName != null && __isset.tableNameOrRegionName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableNameOrRegionName: ");
        sb.Append(TableNameOrRegionName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class compactResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public compactResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("compact_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("compact_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class majorCompactArgs : TBase
  {
    private byte[] _tableNameOrRegionName;

    public byte[] TableNameOrRegionName
    {
      get
      {
        return _tableNameOrRegionName;
      }
      set
      {
        __isset.tableNameOrRegionName = true;
        this._tableNameOrRegionName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableNameOrRegionName;
    }

    public majorCompactArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableNameOrRegionName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("majorCompact_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableNameOrRegionName != null && __isset.tableNameOrRegionName)
        {
          field.Name = "tableNameOrRegionName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableNameOrRegionName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("majorCompact_args(");
      bool __first = true;
      if (TableNameOrRegionName != null && __isset.tableNameOrRegionName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableNameOrRegionName: ");
        sb.Append(TableNameOrRegionName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class majorCompactResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public majorCompactResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("majorCompact_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("majorCompact_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getTableNamesArgs : TBase
  {

    public getTableNamesArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getTableNames_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getTableNames_args(");
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getTableNamesResult : TBase
  {
    private List<byte[]> _success;
    private IOError _io;

    public List<byte[]> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getTableNamesResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<byte[]>();
                  TList _list25 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    byte[] _elem27;
                    _elem27 = await iprot.ReadBinaryAsync(cancellationToken);
                    Success.Add(_elem27);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getTableNames_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
              foreach (byte[] _iter28 in Success)
              {
                await oprot.WriteBinaryAsync(_iter28, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getTableNames_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getColumnDescriptorsArgs : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// table name
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
    }

    public getColumnDescriptorsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getColumnDescriptors_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getColumnDescriptors_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getColumnDescriptorsResult : TBase
  {
    private Dictionary<byte[], ColumnDescriptor> _success;
    private IOError _io;

    public Dictionary<byte[], ColumnDescriptor> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getColumnDescriptorsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map)
              {
                {
                  Success = new Dictionary<byte[], ColumnDescriptor>();
                  TMap _map29 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i30 = 0; _i30 < _map29.Count; ++_i30)
                  {
                    byte[] _key31;
                    ColumnDescriptor _val32;
                    _key31 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val32 = new ColumnDescriptor();
                    await _val32.ReadAsync(iprot, cancellationToken);
                    Success[_key31] = _val32;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getColumnDescriptors_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (byte[] _iter33 in Success.Keys)
              {
                await oprot.WriteBinaryAsync(_iter33, cancellationToken);
                await Success[_iter33].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getColumnDescriptors_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getTableRegionsArgs : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// table name
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
    }

    public getTableRegionsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getTableRegions_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getTableRegions_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getTableRegionsResult : TBase
  {
    private List<TRegionInfo> _success;
    private IOError _io;

    public List<TRegionInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getTableRegionsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRegionInfo>();
                  TList _list34 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i35 = 0; _i35 < _list34.Count; ++_i35)
                  {
                    TRegionInfo _elem36;
                    _elem36 = new TRegionInfo();
                    await _elem36.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem36);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getTableRegions_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRegionInfo _iter37 in Success)
              {
                await _iter37.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getTableRegions_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class createTableArgs : TBase
  {
    private byte[] _tableName;
    private List<ColumnDescriptor> _columnFamilies;

    /// <summary>
    /// name of table to create
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// list of column family descriptors
    /// </summary>
    public List<ColumnDescriptor> ColumnFamilies
    {
      get
      {
        return _columnFamilies;
      }
      set
      {
        __isset.columnFamilies = true;
        this._columnFamilies = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool columnFamilies;
    }

    public createTableArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  ColumnFamilies = new List<ColumnDescriptor>();
                  TList _list38 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    ColumnDescriptor _elem40;
                    _elem40 = new ColumnDescriptor();
                    await _elem40.ReadAsync(iprot, cancellationToken);
                    ColumnFamilies.Add(_elem40);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("createTable_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ColumnFamilies != null && __isset.columnFamilies)
        {
          field.Name = "columnFamilies";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, ColumnFamilies.Count), cancellationToken);
            foreach (ColumnDescriptor _iter41 in ColumnFamilies)
            {
              await _iter41.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("createTable_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (ColumnFamilies != null && __isset.columnFamilies)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ColumnFamilies: ");
        sb.Append(ColumnFamilies);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class createTableResult : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;
    private AlreadyExists _exist;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }

    public AlreadyExists Exist
    {
      get
      {
        return _exist;
      }
      set
      {
        __isset.exist = true;
        this._exist = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
      public bool ia;
      public bool exist;
    }

    public createTableResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Exist = new AlreadyExists();
                await Exist.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("createTable_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.exist)
        {
          if (Exist != null)
          {
            field.Name = "Exist";
            field.Type = TType.Struct;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Exist.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("createTable_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      if (Exist != null && __isset.exist)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Exist: ");
        sb.Append(Exist== null ? "<null>" : Exist.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteTableArgs : TBase
  {
    private byte[] _tableName;

    /// <summary>
    /// name of table to delete
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
    }

    public deleteTableArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteTable_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteTable_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteTableResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public deleteTableResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteTable_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteTable_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool attributes;
    }

    public getArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map42 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i43 = 0; _i43 < _map42.Count; ++_i43)
                  {
                    byte[] _key44;
                    byte[] _val45;
                    _key44 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val45 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key44] = _val45;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("get_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter46 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter46, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter46], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("get_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getResult : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TCell>();
                  TList _list47 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i48 = 0; _i48 < _list47.Count; ++_i48)
                  {
                    TCell _elem49;
                    _elem49 = new TCell();
                    await _elem49.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem49);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("get_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TCell _iter50 in Success)
              {
                await _iter50.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("get_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getVerArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private int _numVersions;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// number of versions to retrieve
    /// </summary>
    public int NumVersions
    {
      get
      {
        return _numVersions;
      }
      set
      {
        __isset.numVersions = true;
        this._numVersions = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool numVersions;
      public bool attributes;
    }

    public getVerArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                NumVersions = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map51 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i52 = 0; _i52 < _map51.Count; ++_i52)
                  {
                    byte[] _key53;
                    byte[] _val54;
                    _key53 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val54 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key53] = _val54;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getVer_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.numVersions)
        {
          field.Name = "numVersions";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(NumVersions, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter55 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter55, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter55], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getVer_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (__isset.numVersions)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NumVersions: ");
        sb.Append(NumVersions);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getVerResult : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getVerResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TCell>();
                  TList _list56 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i57 = 0; _i57 < _list56.Count; ++_i57)
                  {
                    TCell _elem58;
                    _elem58 = new TCell();
                    await _elem58.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem58);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getVer_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TCell _iter59 in Success)
              {
                await _iter59.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getVer_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getVerTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private long _timestamp;
    private int _numVersions;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// number of versions to retrieve
    /// </summary>
    public int NumVersions
    {
      get
      {
        return _numVersions;
      }
      set
      {
        __isset.numVersions = true;
        this._numVersions = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool timestamp;
      public bool numVersions;
      public bool attributes;
    }

    public getVerTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                NumVersions = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map60 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i61 = 0; _i61 < _map60.Count; ++_i61)
                  {
                    byte[] _key62;
                    byte[] _val63;
                    _key62 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val63 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key62] = _val63;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getVerTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.numVersions)
        {
          field.Name = "numVersions";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(NumVersions, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter64 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter64, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter64], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getVerTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (__isset.numVersions)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NumVersions: ");
        sb.Append(NumVersions);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getVerTsResult : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getVerTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TCell>();
                  TList _list65 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i66 = 0; _i66 < _list65.Count; ++_i66)
                  {
                    TCell _elem67;
                    _elem67 = new TCell();
                    await _elem67.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem67);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getVerTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TCell _iter68 in Success)
              {
                await _iter68.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getVerTs_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool attributes;
    }

    public getRowArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map69 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i70 = 0; _i70 < _map69.Count; ++_i70)
                  {
                    byte[] _key71;
                    byte[] _val72;
                    _key71 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val72 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key71] = _val72;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRow_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter73 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter73, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter73], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRow_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list74 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i75 = 0; _i75 < _list74.Count; ++_i75)
                  {
                    TRowResult _elem76;
                    _elem76 = new TRowResult();
                    await _elem76.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem76);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRow_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter77 in Success)
              {
                await _iter77.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRow_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowWithColumnsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<byte[]> _columns;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool columns;
      public bool attributes;
    }

    public getRowWithColumnsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list78 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i79 = 0; _i79 < _list78.Count; ++_i79)
                  {
                    byte[] _elem80;
                    _elem80 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem80);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map81 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i82 = 0; _i82 < _map81.Count; ++_i82)
                  {
                    byte[] _key83;
                    byte[] _val84;
                    _key83 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val84 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key83] = _val84;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowWithColumns_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter85 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter85, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter86 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter86, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter86], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowWithColumns_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowWithColumnsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowWithColumnsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list87 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i88 = 0; _i88 < _list87.Count; ++_i88)
                  {
                    TRowResult _elem89;
                    _elem89 = new TRowResult();
                    await _elem89.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem89);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowWithColumns_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter90 in Success)
              {
                await _iter90.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowWithColumns_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool timestamp;
      public bool attributes;
    }

    public getRowTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map91 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i92 = 0; _i92 < _map91.Count; ++_i92)
                  {
                    byte[] _key93;
                    byte[] _val94;
                    _key93 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val94 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key93] = _val94;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter95 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter95, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter95], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowTsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list96 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    TRowResult _elem98;
                    _elem98 = new TRowResult();
                    await _elem98.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem98);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter99 in Success)
              {
                await _iter99.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowTs_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowWithColumnsTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<byte[]> _columns;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool columns;
      public bool timestamp;
      public bool attributes;
    }

    public getRowWithColumnsTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list100 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i101 = 0; _i101 < _list100.Count; ++_i101)
                  {
                    byte[] _elem102;
                    _elem102 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem102);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map103 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i104 = 0; _i104 < _map103.Count; ++_i104)
                  {
                    byte[] _key105;
                    byte[] _val106;
                    _key105 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val106 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key105] = _val106;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowWithColumnsTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter107 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter107, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter108 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter108, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter108], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowWithColumnsTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowWithColumnsTsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowWithColumnsTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list109 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i110 = 0; _i110 < _list109.Count; ++_i110)
                  {
                    TRowResult _elem111;
                    _elem111 = new TRowResult();
                    await _elem111.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem111);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowWithColumnsTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter112 in Success)
              {
                await _iter112.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowWithColumnsTs_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsArgs : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool rows;
      public bool attributes;
    }

    public getRowsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Rows = new List<byte[]>();
                  TList _list113 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i114 = 0; _i114 < _list113.Count; ++_i114)
                  {
                    byte[] _elem115;
                    _elem115 = await iprot.ReadBinaryAsync(cancellationToken);
                    Rows.Add(_elem115);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map116 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i117 = 0; _i117 < _map116.Count; ++_i117)
                  {
                    byte[] _key118;
                    byte[] _val119;
                    _key118 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val119 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key118] = _val119;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRows_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Rows != null && __isset.rows)
        {
          field.Name = "rows";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Rows.Count), cancellationToken);
            foreach (byte[] _iter120 in Rows)
            {
              await oprot.WriteBinaryAsync(_iter120, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter121 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter121, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter121], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRows_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Rows != null && __isset.rows)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Rows: ");
        sb.Append(Rows);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list122 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i123 = 0; _i123 < _list122.Count; ++_i123)
                  {
                    TRowResult _elem124;
                    _elem124 = new TRowResult();
                    await _elem124.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem124);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRows_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter125 in Success)
              {
                await _iter125.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRows_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsWithColumnsArgs : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private List<byte[]> _columns;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool rows;
      public bool columns;
      public bool attributes;
    }

    public getRowsWithColumnsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Rows = new List<byte[]>();
                  TList _list126 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i127 = 0; _i127 < _list126.Count; ++_i127)
                  {
                    byte[] _elem128;
                    _elem128 = await iprot.ReadBinaryAsync(cancellationToken);
                    Rows.Add(_elem128);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list129 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    byte[] _elem131;
                    _elem131 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem131);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map132 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i133 = 0; _i133 < _map132.Count; ++_i133)
                  {
                    byte[] _key134;
                    byte[] _val135;
                    _key134 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val135 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key134] = _val135;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowsWithColumns_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Rows != null && __isset.rows)
        {
          field.Name = "rows";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Rows.Count), cancellationToken);
            foreach (byte[] _iter136 in Rows)
            {
              await oprot.WriteBinaryAsync(_iter136, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter137 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter137, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter138 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter138, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter138], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowsWithColumns_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Rows != null && __isset.rows)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Rows: ");
        sb.Append(Rows);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsWithColumnsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowsWithColumnsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list139 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i140 = 0; _i140 < _list139.Count; ++_i140)
                  {
                    TRowResult _elem141;
                    _elem141 = new TRowResult();
                    await _elem141.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem141);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowsWithColumns_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter142 in Success)
              {
                await _iter142.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowsWithColumns_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsTsArgs : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of the table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool rows;
      public bool timestamp;
      public bool attributes;
    }

    public getRowsTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Rows = new List<byte[]>();
                  TList _list143 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i144 = 0; _i144 < _list143.Count; ++_i144)
                  {
                    byte[] _elem145;
                    _elem145 = await iprot.ReadBinaryAsync(cancellationToken);
                    Rows.Add(_elem145);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map146 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i147 = 0; _i147 < _map146.Count; ++_i147)
                  {
                    byte[] _key148;
                    byte[] _val149;
                    _key148 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val149 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key148] = _val149;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowsTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Rows != null && __isset.rows)
        {
          field.Name = "rows";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Rows.Count), cancellationToken);
            foreach (byte[] _iter150 in Rows)
            {
              await oprot.WriteBinaryAsync(_iter150, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter151 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter151, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter151], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowsTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Rows != null && __isset.rows)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Rows: ");
        sb.Append(Rows);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsTsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowsTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list152 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i153 = 0; _i153 < _list152.Count; ++_i153)
                  {
                    TRowResult _elem154;
                    _elem154 = new TRowResult();
                    await _elem154.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem154);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowsTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter155 in Success)
              {
                await _iter155.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowsTs_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsWithColumnsTsArgs : TBase
  {
    private byte[] _tableName;
    private List<byte[]> _rows;
    private List<byte[]> _columns;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row keys
    /// </summary>
    public List<byte[]> Rows
    {
      get
      {
        return _rows;
      }
      set
      {
        __isset.rows = true;
        this._rows = value;
      }
    }

    /// <summary>
    /// List of columns to return, null for all columns
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Get attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool rows;
      public bool columns;
      public bool timestamp;
      public bool attributes;
    }

    public getRowsWithColumnsTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Rows = new List<byte[]>();
                  TList _list156 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i157 = 0; _i157 < _list156.Count; ++_i157)
                  {
                    byte[] _elem158;
                    _elem158 = await iprot.ReadBinaryAsync(cancellationToken);
                    Rows.Add(_elem158);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list159 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i160 = 0; _i160 < _list159.Count; ++_i160)
                  {
                    byte[] _elem161;
                    _elem161 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem161);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map162 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i163 = 0; _i163 < _map162.Count; ++_i163)
                  {
                    byte[] _key164;
                    byte[] _val165;
                    _key164 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val165 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key164] = _val165;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowsWithColumnsTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Rows != null && __isset.rows)
        {
          field.Name = "rows";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Rows.Count), cancellationToken);
            foreach (byte[] _iter166 in Rows)
            {
              await oprot.WriteBinaryAsync(_iter166, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter167 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter167, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter168 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter168, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter168], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowsWithColumnsTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Rows != null && __isset.rows)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Rows: ");
        sb.Append(Rows);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowsWithColumnsTsResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowsWithColumnsTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list169 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i170 = 0; _i170 < _list169.Count; ++_i170)
                  {
                    TRowResult _elem171;
                    _elem171 = new TRowResult();
                    await _elem171.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem171);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowsWithColumnsTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter172 in Success)
              {
                await _iter172.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowsWithColumnsTs_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<Mutation> _mutations;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// list of mutation commands
    /// </summary>
    public List<Mutation> Mutations
    {
      get
      {
        return _mutations;
      }
      set
      {
        __isset.mutations = true;
        this._mutations = value;
      }
    }

    /// <summary>
    /// Mutation attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool mutations;
      public bool attributes;
    }

    public mutateRowArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Mutations = new List<Mutation>();
                  TList _list173 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i174 = 0; _i174 < _list173.Count; ++_i174)
                  {
                    Mutation _elem175;
                    _elem175 = new Mutation();
                    await _elem175.ReadAsync(iprot, cancellationToken);
                    Mutations.Add(_elem175);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map176 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i177 = 0; _i177 < _map176.Count; ++_i177)
                  {
                    byte[] _key178;
                    byte[] _val179;
                    _key178 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val179 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key178] = _val179;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRow_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mutations != null && __isset.mutations)
        {
          field.Name = "mutations";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Mutations.Count), cancellationToken);
            foreach (Mutation _iter180 in Mutations)
            {
              await _iter180.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter181 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter181, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter181], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRow_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Mutations != null && __isset.mutations)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mutations: ");
        sb.Append(Mutations);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowResult : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
      public bool ia;
    }

    public mutateRowResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRow_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRow_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private List<Mutation> _mutations;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// list of mutation commands
    /// </summary>
    public List<Mutation> Mutations
    {
      get
      {
        return _mutations;
      }
      set
      {
        __isset.mutations = true;
        this._mutations = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Mutation attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool mutations;
      public bool timestamp;
      public bool attributes;
    }

    public mutateRowTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Mutations = new List<Mutation>();
                  TList _list182 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i183 = 0; _i183 < _list182.Count; ++_i183)
                  {
                    Mutation _elem184;
                    _elem184 = new Mutation();
                    await _elem184.ReadAsync(iprot, cancellationToken);
                    Mutations.Add(_elem184);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map185 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i186 = 0; _i186 < _map185.Count; ++_i186)
                  {
                    byte[] _key187;
                    byte[] _val188;
                    _key187 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val188 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key187] = _val188;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRowTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mutations != null && __isset.mutations)
        {
          field.Name = "mutations";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Mutations.Count), cancellationToken);
            foreach (Mutation _iter189 in Mutations)
            {
              await _iter189.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter190 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter190, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter190], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRowTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Mutations != null && __isset.mutations)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mutations: ");
        sb.Append(Mutations);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowTsResult : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
      public bool ia;
    }

    public mutateRowTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRowTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRowTs_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowsArgs : TBase
  {
    private byte[] _tableName;
    private List<BatchMutation> _rowBatches;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// list of row batches
    /// </summary>
    public List<BatchMutation> RowBatches
    {
      get
      {
        return _rowBatches;
      }
      set
      {
        __isset.rowBatches = true;
        this._rowBatches = value;
      }
    }

    /// <summary>
    /// Mutation attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool rowBatches;
      public bool attributes;
    }

    public mutateRowsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  RowBatches = new List<BatchMutation>();
                  TList _list191 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i192 = 0; _i192 < _list191.Count; ++_i192)
                  {
                    BatchMutation _elem193;
                    _elem193 = new BatchMutation();
                    await _elem193.ReadAsync(iprot, cancellationToken);
                    RowBatches.Add(_elem193);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map194 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i195 = 0; _i195 < _map194.Count; ++_i195)
                  {
                    byte[] _key196;
                    byte[] _val197;
                    _key196 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val197 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key196] = _val197;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRows_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (RowBatches != null && __isset.rowBatches)
        {
          field.Name = "rowBatches";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, RowBatches.Count), cancellationToken);
            foreach (BatchMutation _iter198 in RowBatches)
            {
              await _iter198.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter199 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter199, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter199], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRows_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (RowBatches != null && __isset.rowBatches)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RowBatches: ");
        sb.Append(RowBatches);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowsResult : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
      public bool ia;
    }

    public mutateRowsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRows_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRows_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowsTsArgs : TBase
  {
    private byte[] _tableName;
    private List<BatchMutation> _rowBatches;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// list of row batches
    /// </summary>
    public List<BatchMutation> RowBatches
    {
      get
      {
        return _rowBatches;
      }
      set
      {
        __isset.rowBatches = true;
        this._rowBatches = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Mutation attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool rowBatches;
      public bool timestamp;
      public bool attributes;
    }

    public mutateRowsTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  RowBatches = new List<BatchMutation>();
                  TList _list200 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i201 = 0; _i201 < _list200.Count; ++_i201)
                  {
                    BatchMutation _elem202;
                    _elem202 = new BatchMutation();
                    await _elem202.ReadAsync(iprot, cancellationToken);
                    RowBatches.Add(_elem202);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map203 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i204 = 0; _i204 < _map203.Count; ++_i204)
                  {
                    byte[] _key205;
                    byte[] _val206;
                    _key205 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val206 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key205] = _val206;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRowsTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (RowBatches != null && __isset.rowBatches)
        {
          field.Name = "rowBatches";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, RowBatches.Count), cancellationToken);
            foreach (BatchMutation _iter207 in RowBatches)
            {
              await _iter207.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter208 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter208, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter208], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRowsTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (RowBatches != null && __isset.rowBatches)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RowBatches: ");
        sb.Append(RowBatches);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class mutateRowsTsResult : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
      public bool ia;
    }

    public mutateRowsTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("mutateRowsTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("mutateRowsTs_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class atomicIncrementArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private long _value;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row to increment
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// name of column
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// amount to increment by
    /// </summary>
    public long Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool @value;
    }

    public atomicIncrementArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Value = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("atomicIncrement_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.@value)
        {
          field.Name = "value";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("atomicIncrement_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (__isset.@value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Value: ");
        sb.Append(Value);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class atomicIncrementResult : TBase
  {
    private long _success;
    private IOError _io;
    private IllegalArgument _ia;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
      public bool ia;
    }

    public atomicIncrementResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64)
              {
                Success = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("atomicIncrement_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("atomicIncrement_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Row to update
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// name of column whose value is to be deleted
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// Delete attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool attributes;
    }

    public deleteAllArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map209 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i210 = 0; _i210 < _map209.Count; ++_i210)
                  {
                    byte[] _key211;
                    byte[] _val212;
                    _key211 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val212 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key211] = _val212;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAll_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter213 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter213, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter213], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAll_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public deleteAllResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAll_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAll_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Row to update
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// name of column whose value is to be deleted
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Delete attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool timestamp;
      public bool attributes;
    }

    public deleteAllTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map214 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i215 = 0; _i215 < _map214.Count; ++_i215)
                  {
                    byte[] _key216;
                    byte[] _val217;
                    _key216 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val217 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key216] = _val217;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAllTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter218 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter218, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter218], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAllTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllTsResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public deleteAllTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAllTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAllTs_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllRowArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// key of the row to be completely deleted.
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// Delete attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool attributes;
    }

    public deleteAllRowArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map219 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i220 = 0; _i220 < _map219.Count; ++_i220)
                  {
                    byte[] _key221;
                    byte[] _val222;
                    _key221 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val222 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key221] = _val222;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAllRow_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter223 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter223, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter223], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAllRow_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllRowResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public deleteAllRowResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAllRow_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAllRow_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class incrementArgs : TBase
  {
    private TIncrement _increment;

    /// <summary>
    /// The single increment to apply
    /// </summary>
    public TIncrement Increment
    {
      get
      {
        return _increment;
      }
      set
      {
        __isset.increment = true;
        this._increment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool increment;
    }

    public incrementArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Increment = new TIncrement();
                await Increment.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("increment_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Increment != null && __isset.increment)
        {
          field.Name = "increment";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Increment.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("increment_args(");
      bool __first = true;
      if (Increment != null && __isset.increment)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Increment: ");
        sb.Append(Increment== null ? "<null>" : Increment.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class incrementResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public incrementResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("increment_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("increment_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class incrementRowsArgs : TBase
  {
    private List<TIncrement> _increments;

    /// <summary>
    /// The list of increments
    /// </summary>
    public List<TIncrement> Increments
    {
      get
      {
        return _increments;
      }
      set
      {
        __isset.increments = true;
        this._increments = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool increments;
    }

    public incrementRowsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  Increments = new List<TIncrement>();
                  TList _list224 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i225 = 0; _i225 < _list224.Count; ++_i225)
                  {
                    TIncrement _elem226;
                    _elem226 = new TIncrement();
                    await _elem226.ReadAsync(iprot, cancellationToken);
                    Increments.Add(_elem226);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("incrementRows_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Increments != null && __isset.increments)
        {
          field.Name = "increments";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Increments.Count), cancellationToken);
            foreach (TIncrement _iter227 in Increments)
            {
              await _iter227.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("incrementRows_args(");
      bool __first = true;
      if (Increments != null && __isset.increments)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Increments: ");
        sb.Append(Increments);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class incrementRowsResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public incrementRowsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("incrementRows_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("incrementRows_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllRowTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// key of the row to be completely deleted.
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Delete attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool timestamp;
      public bool attributes;
    }

    public deleteAllRowTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map228 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i229 = 0; _i229 < _map228.Count; ++_i229)
                  {
                    byte[] _key230;
                    byte[] _val231;
                    _key230 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val231 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key230] = _val231;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAllRowTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter232 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter232, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter232], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAllRowTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class deleteAllRowTsResult : TBase
  {
    private IOError _io;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
    }

    public deleteAllRowTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("deleteAllRowTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("deleteAllRowTs_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithScanArgs : TBase
  {
    private byte[] _tableName;
    private TScan _scan;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Scan instance
    /// </summary>
    public TScan Scan
    {
      get
      {
        return _scan;
      }
      set
      {
        __isset.scan = true;
        this._scan = value;
      }
    }

    /// <summary>
    /// Scan attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool scan;
      public bool attributes;
    }

    public scannerOpenWithScanArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Scan = new TScan();
                await Scan.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map233 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i234 = 0; _i234 < _map233.Count; ++_i234)
                  {
                    byte[] _key235;
                    byte[] _val236;
                    _key235 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val236 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key235] = _val236;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithScan_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Scan != null && __isset.scan)
        {
          field.Name = "scan";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Scan.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter237 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter237, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter237], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithScan_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Scan != null && __isset.scan)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Scan: ");
        sb.Append(Scan== null ? "<null>" : Scan.ToString());
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithScanResult : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public scannerOpenWithScanResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32)
              {
                Success = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithScan_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithScan_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private List<byte[]> _columns;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// Scan attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool startRow;
      public bool columns;
      public bool attributes;
    }

    public scannerOpenArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StartRow = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list238 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i239 = 0; _i239 < _list238.Count; ++_i239)
                  {
                    byte[] _elem240;
                    _elem240 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem240);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map241 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i242 = 0; _i242 < _map241.Count; ++_i242)
                  {
                    byte[] _key243;
                    byte[] _val244;
                    _key243 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val244 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key243] = _val244;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpen_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StartRow != null && __isset.startRow)
        {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StartRow, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter245 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter245, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter246 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter246, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter246], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpen_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (StartRow != null && __isset.startRow)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StartRow: ");
        sb.Append(StartRow);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenResult : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public scannerOpenResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32)
              {
                Success = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpen_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpen_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithStopArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private byte[] _stopRow;
    private List<byte[]> _columns;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// row to stop scanning on. This row is *not* included in the
    /// scanner's results
    /// </summary>
    public byte[] StopRow
    {
      get
      {
        return _stopRow;
      }
      set
      {
        __isset.stopRow = true;
        this._stopRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// Scan attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool startRow;
      public bool stopRow;
      public bool columns;
      public bool attributes;
    }

    public scannerOpenWithStopArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StartRow = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                StopRow = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list247 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i248 = 0; _i248 < _list247.Count; ++_i248)
                  {
                    byte[] _elem249;
                    _elem249 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem249);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map250 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i251 = 0; _i251 < _map250.Count; ++_i251)
                  {
                    byte[] _key252;
                    byte[] _val253;
                    _key252 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val253 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key252] = _val253;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithStop_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StartRow != null && __isset.startRow)
        {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StartRow, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StopRow != null && __isset.stopRow)
        {
          field.Name = "stopRow";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StopRow, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter254 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter254, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter255 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter255, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter255], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithStop_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (StartRow != null && __isset.startRow)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StartRow: ");
        sb.Append(StartRow);
      }
      if (StopRow != null && __isset.stopRow)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StopRow: ");
        sb.Append(StopRow);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithStopResult : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public scannerOpenWithStopResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32)
              {
                Success = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithStop_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithStop_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithPrefixArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _startAndPrefix;
    private List<byte[]> _columns;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// the prefix (and thus start row) of the keys you want
    /// </summary>
    public byte[] StartAndPrefix
    {
      get
      {
        return _startAndPrefix;
      }
      set
      {
        __isset.startAndPrefix = true;
        this._startAndPrefix = value;
      }
    }

    /// <summary>
    /// the columns you want returned
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// Scan attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool startAndPrefix;
      public bool columns;
      public bool attributes;
    }

    public scannerOpenWithPrefixArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StartAndPrefix = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list256 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i257 = 0; _i257 < _list256.Count; ++_i257)
                  {
                    byte[] _elem258;
                    _elem258 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem258);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map259 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i260 = 0; _i260 < _map259.Count; ++_i260)
                  {
                    byte[] _key261;
                    byte[] _val262;
                    _key261 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val262 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key261] = _val262;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithPrefix_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StartAndPrefix != null && __isset.startAndPrefix)
        {
          field.Name = "startAndPrefix";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StartAndPrefix, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter263 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter263, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter264 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter264, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter264], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithPrefix_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (StartAndPrefix != null && __isset.startAndPrefix)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StartAndPrefix: ");
        sb.Append(StartAndPrefix);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithPrefixResult : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public scannerOpenWithPrefixResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32)
              {
                Success = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithPrefix_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithPrefix_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private List<byte[]> _columns;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Scan attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool startRow;
      public bool columns;
      public bool timestamp;
      public bool attributes;
    }

    public scannerOpenTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StartRow = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list265 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i266 = 0; _i266 < _list265.Count; ++_i266)
                  {
                    byte[] _elem267;
                    _elem267 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem267);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map268 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i269 = 0; _i269 < _map268.Count; ++_i269)
                  {
                    byte[] _key270;
                    byte[] _val271;
                    _key270 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val271 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key270] = _val271;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StartRow != null && __isset.startRow)
        {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StartRow, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter272 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter272, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter273 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter273, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter273], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (StartRow != null && __isset.startRow)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StartRow: ");
        sb.Append(StartRow);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenTsResult : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public scannerOpenTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32)
              {
                Success = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenTs_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithStopTsArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _startRow;
    private byte[] _stopRow;
    private List<byte[]> _columns;
    private long _timestamp;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// Starting row in table to scan.
    /// Send "" (empty string) to start at the first row.
    /// </summary>
    public byte[] StartRow
    {
      get
      {
        return _startRow;
      }
      set
      {
        __isset.startRow = true;
        this._startRow = value;
      }
    }

    /// <summary>
    /// row to stop scanning on. This row is *not* included in the
    /// scanner's results
    /// </summary>
    public byte[] StopRow
    {
      get
      {
        return _stopRow;
      }
      set
      {
        __isset.stopRow = true;
        this._stopRow = value;
      }
    }

    /// <summary>
    /// columns to scan. If column name is a column family, all
    /// columns of the specified column family are returned. It's also possible
    /// to pass a regex in the column qualifier.
    /// </summary>
    public List<byte[]> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }

    /// <summary>
    /// timestamp
    /// </summary>
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// Scan attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool startRow;
      public bool stopRow;
      public bool columns;
      public bool timestamp;
      public bool attributes;
    }

    public scannerOpenWithStopTsArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StartRow = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                StopRow = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Columns = new List<byte[]>();
                  TList _list274 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i275 = 0; _i275 < _list274.Count; ++_i275)
                  {
                    byte[] _elem276;
                    _elem276 = await iprot.ReadBinaryAsync(cancellationToken);
                    Columns.Add(_elem276);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map277 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i278 = 0; _i278 < _map277.Count; ++_i278)
                  {
                    byte[] _key279;
                    byte[] _val280;
                    _key279 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val280 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key279] = _val280;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithStopTs_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StartRow != null && __isset.startRow)
        {
          field.Name = "startRow";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StartRow, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (StopRow != null && __isset.stopRow)
        {
          field.Name = "stopRow";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(StopRow, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Columns != null && __isset.columns)
        {
          field.Name = "columns";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Columns.Count), cancellationToken);
            foreach (byte[] _iter281 in Columns)
            {
              await oprot.WriteBinaryAsync(_iter281, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter282 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter282, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter282], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithStopTs_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (StartRow != null && __isset.startRow)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StartRow: ");
        sb.Append(StartRow);
      }
      if (StopRow != null && __isset.stopRow)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("StopRow: ");
        sb.Append(StopRow);
      }
      if (Columns != null && __isset.columns)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Columns: ");
        sb.Append(Columns);
      }
      if (__isset.timestamp)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Timestamp: ");
        sb.Append(Timestamp);
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerOpenWithStopTsResult : TBase
  {
    private int _success;
    private IOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public scannerOpenWithStopTsResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32)
              {
                Success = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerOpenWithStopTs_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerOpenWithStopTs_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerGetArgs : TBase
  {
    private int _id;

    /// <summary>
    /// id of a scanner returned by scannerOpen
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
    }

    public scannerGetArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerGet_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.id)
        {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerGet_args(");
      bool __first = true;
      if (__isset.id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerGetResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;
    private IllegalArgument _ia;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
      public bool ia;
    }

    public scannerGetResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list283 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i284 = 0; _i284 < _list283.Count; ++_i284)
                  {
                    TRowResult _elem285;
                    _elem285 = new TRowResult();
                    await _elem285.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem285);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerGet_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter286 in Success)
              {
                await _iter286.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerGet_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerGetListArgs : TBase
  {
    private int _id;
    private int _nbRows;

    /// <summary>
    /// id of a scanner returned by scannerOpen
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// number of results to return
    /// </summary>
    public int NbRows
    {
      get
      {
        return _nbRows;
      }
      set
      {
        __isset.nbRows = true;
        this._nbRows = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
      public bool nbRows;
    }

    public scannerGetListArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                NbRows = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerGetList_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.id)
        {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.nbRows)
        {
          field.Name = "nbRows";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(NbRows, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerGetList_args(");
      bool __first = true;
      if (__isset.id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.nbRows)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NbRows: ");
        sb.Append(NbRows);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerGetListResult : TBase
  {
    private List<TRowResult> _success;
    private IOError _io;
    private IllegalArgument _ia;

    public List<TRowResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
      public bool ia;
    }

    public scannerGetListResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TRowResult>();
                  TList _list287 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i288 = 0; _i288 < _list287.Count; ++_i288)
                  {
                    TRowResult _elem289;
                    _elem289 = new TRowResult();
                    await _elem289.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem289);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerGetList_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TRowResult _iter290 in Success)
              {
                await _iter290.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerGetList_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerCloseArgs : TBase
  {
    private int _id;

    /// <summary>
    /// id of a scanner returned by scannerOpen
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
    }

    public scannerCloseArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerClose_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.id)
        {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerClose_args(");
      bool __first = true;
      if (__isset.id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class scannerCloseResult : TBase
  {
    private IOError _io;
    private IllegalArgument _ia;

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool io;
      public bool ia;
    }

    public scannerCloseResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("scannerClose_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("scannerClose_result(");
      bool __first = true;
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowOrBeforeArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _family;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Family
    {
      get
      {
        return _family;
      }
      set
      {
        __isset.family = true;
        this._family = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool family;
    }

    public getRowOrBeforeArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Family = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowOrBefore_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Family != null && __isset.family)
        {
          field.Name = "family";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Family, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowOrBefore_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Family != null && __isset.family)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Family: ");
        sb.Append(Family);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRowOrBeforeResult : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRowOrBeforeResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TCell>();
                  TList _list291 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i292 = 0; _i292 < _list291.Count; ++_i292)
                  {
                    TCell _elem293;
                    _elem293 = new TCell();
                    await _elem293.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem293);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRowOrBefore_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TCell _iter294 in Success)
              {
                await _iter294.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRowOrBefore_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRegionInfoArgs : TBase
  {
    private byte[] _row;

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool row;
    }

    public getRegionInfoArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRegionInfo_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRegionInfo_args(");
      bool __first = true;
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class getRegionInfoResult : TBase
  {
    private TRegionInfo _success;
    private IOError _io;

    public TRegionInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public getRegionInfoResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct)
              {
                Success = new TRegionInfo();
                await Success.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("getRegionInfo_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Success.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("getRegionInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class appendArgs : TBase
  {
    private TAppend _append;

    /// <summary>
    /// The single append operation to apply
    /// </summary>
    public TAppend Append
    {
      get
      {
        return _append;
      }
      set
      {
        __isset.append = true;
        this._append = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool append;
    }

    public appendArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Append = new TAppend();
                await Append.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("append_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Append != null && __isset.append)
        {
          field.Name = "append";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Append.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("append_args(");
      bool __first = true;
      if (Append != null && __isset.append)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Append: ");
        sb.Append(Append== null ? "<null>" : Append.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class appendResult : TBase
  {
    private List<TCell> _success;
    private IOError _io;

    public List<TCell> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
    }

    public appendResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List)
              {
                {
                  Success = new List<TCell>();
                  TList _list295 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i296 = 0; _i296 < _list295.Count; ++_i296)
                  {
                    TCell _elem297;
                    _elem297 = new TCell();
                    await _elem297.ReadAsync(iprot, cancellationToken);
                    Success.Add(_elem297);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("append_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          if (Success != null)
          {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (TCell _iter298 in Success)
              {
                await _iter298.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("append_result(");
      bool __first = true;
      if (Success != null && __isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class checkAndPutArgs : TBase
  {
    private byte[] _tableName;
    private byte[] _row;
    private byte[] _column;
    private byte[] _value;
    private Mutation _mput;
    private Dictionary<byte[], byte[]> _attributes;

    /// <summary>
    /// name of table
    /// </summary>
    public byte[] TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    /// <summary>
    /// row key
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column name
    /// </summary>
    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    /// <summary>
    /// the expected value for the column parameter, if not
    /// provided the check is for the non-existence of the
    /// column in question
    /// </summary>
    public byte[] Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    /// <summary>
    /// mutation for the put
    /// </summary>
    public Mutation Mput
    {
      get
      {
        return _mput;
      }
      set
      {
        __isset.mput = true;
        this._mput = value;
      }
    }

    /// <summary>
    /// Mutation attributes
    /// </summary>
    public Dictionary<byte[], byte[]> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool row;
      public bool column;
      public bool @value;
      public bool mput;
      public bool attributes;
    }

    public checkAndPutArgs()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Row = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Value = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Mput = new Mutation();
                await Mput.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Map)
              {
                {
                  Attributes = new Dictionary<byte[], byte[]>();
                  TMap _map299 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i300 = 0; _i300 < _map299.Count; ++_i300)
                  {
                    byte[] _key301;
                    byte[] _val302;
                    _key301 = await iprot.ReadBinaryAsync(cancellationToken);
                    _val302 = await iprot.ReadBinaryAsync(cancellationToken);
                    Attributes[_key301] = _val302;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("checkAndPut_args");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (TableName != null && __isset.tableName)
        {
          field.Name = "tableName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Row != null && __isset.row)
        {
          field.Name = "row";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Row, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Column != null && __isset.column)
        {
          field.Name = "column";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Value != null && __isset.@value)
        {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Mput != null && __isset.mput)
        {
          field.Name = "mput";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Mput.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Attributes != null && __isset.attributes)
        {
          field.Name = "attributes";
          field.Type = TType.Map;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
            foreach (byte[] _iter303 in Attributes.Keys)
            {
              await oprot.WriteBinaryAsync(_iter303, cancellationToken);
              await oprot.WriteBinaryAsync(Attributes[_iter303], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("checkAndPut_args(");
      bool __first = true;
      if (TableName != null && __isset.tableName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TableName: ");
        sb.Append(TableName);
      }
      if (Row != null && __isset.row)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Row: ");
        sb.Append(Row);
      }
      if (Column != null && __isset.column)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Column: ");
        sb.Append(Column);
      }
      if (Value != null && __isset.@value)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Value: ");
        sb.Append(Value);
      }
      if (Mput != null && __isset.mput)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Mput: ");
        sb.Append(Mput== null ? "<null>" : Mput.ToString());
      }
      if (Attributes != null && __isset.attributes)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Attributes: ");
        sb.Append(Attributes);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }


  public partial class checkAndPutResult : TBase
  {
    private bool _success;
    private IOError _io;
    private IllegalArgument _ia;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public IOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    public IllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool io;
      public bool ia;
    }

    public checkAndPutResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1:
              if (field.Type == TType.Struct)
              {
                Io = new IOError();
                await Io.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Ia = new IllegalArgument();
                await Ia.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("checkAndPut_result");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();

        if(this.__isset.success)
        {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        else if(this.__isset.io)
        {
          if (Io != null)
          {
            field.Name = "Io";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Io.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        else if(this.__isset.ia)
        {
          if (Ia != null)
          {
            field.Name = "Ia";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Ia.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("checkAndPut_result(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Io != null && __isset.io)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Io: ");
        sb.Append(Io== null ? "<null>" : Io.ToString());
      }
      if (Ia != null && __isset.ia)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Ia: ");
        sb.Append(Ia== null ? "<null>" : Ia.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
