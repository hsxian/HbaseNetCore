/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



/// <summary>
/// A TRowMutations object is used to apply a number of Mutations to a single row.
/// </summary>
public partial class TRowMutations : TBase
{

  public byte[] Row { get; set; }

  public List<TMutation> Mutations { get; set; }

  public TRowMutations()
  {
  }

  public TRowMutations(byte[] row, List<TMutation> mutations) : this()
  {
    this.Row = row;
    this.Mutations = mutations;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_row = false;
      bool isset_mutations = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Row = await iprot.ReadBinaryAsync(cancellationToken);
              isset_row = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                Mutations = new List<TMutation>();
                TList _list62 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i63 = 0; _i63 < _list62.Count; ++_i63)
                {
                  TMutation _elem64;
                  _elem64 = new TMutation();
                  await _elem64.ReadAsync(iprot, cancellationToken);
                  Mutations.Add(_elem64);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_mutations = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_row)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_mutations)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TRowMutations");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "row";
      field.Type = TType.String;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteBinaryAsync(Row, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "mutations";
      field.Type = TType.List;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Mutations.Count), cancellationToken);
        foreach (TMutation _iter65 in Mutations)
        {
          await _iter65.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TRowMutations(");
    sb.Append(", Row: ");
    sb.Append(Row);
    sb.Append(", Mutations: ");
    sb.Append(Mutations);
    sb.Append(")");
    return sb.ToString();
  }
}

