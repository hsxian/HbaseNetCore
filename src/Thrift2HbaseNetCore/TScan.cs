/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



/// <summary>
/// Any timestamps in the columns are ignored, use timeRange to select by timestamp.
/// Max versions defaults to 1.
/// </summary>
public partial class TScan : TBase
{
  private byte[] _startRow;
  private byte[] _stopRow;
  private List<TColumn> _columns;
  private int _caching;
  private int _maxVersions;
  private TTimeRange _timeRange;
  private byte[] _filterString;
  private int _batchSize;
  private Dictionary<byte[], byte[]> _attributes;
  private TAuthorization _authorizations;
  private bool _reversed;

  public byte[] StartRow
  {
    get
    {
      return _startRow;
    }
    set
    {
      __isset.startRow = true;
      this._startRow = value;
    }
  }

  public byte[] StopRow
  {
    get
    {
      return _stopRow;
    }
    set
    {
      __isset.stopRow = true;
      this._stopRow = value;
    }
  }

  public List<TColumn> Columns
  {
    get
    {
      return _columns;
    }
    set
    {
      __isset.columns = true;
      this._columns = value;
    }
  }

  public int Caching
  {
    get
    {
      return _caching;
    }
    set
    {
      __isset.caching = true;
      this._caching = value;
    }
  }

  public int MaxVersions
  {
    get
    {
      return _maxVersions;
    }
    set
    {
      __isset.maxVersions = true;
      this._maxVersions = value;
    }
  }

  public TTimeRange TimeRange
  {
    get
    {
      return _timeRange;
    }
    set
    {
      __isset.timeRange = true;
      this._timeRange = value;
    }
  }

  public byte[] FilterString
  {
    get
    {
      return _filterString;
    }
    set
    {
      __isset.filterString = true;
      this._filterString = value;
    }
  }

  public int BatchSize
  {
    get
    {
      return _batchSize;
    }
    set
    {
      __isset.batchSize = true;
      this._batchSize = value;
    }
  }

  public Dictionary<byte[], byte[]> Attributes
  {
    get
    {
      return _attributes;
    }
    set
    {
      __isset.attributes = true;
      this._attributes = value;
    }
  }

  public TAuthorization Authorizations
  {
    get
    {
      return _authorizations;
    }
    set
    {
      __isset.authorizations = true;
      this._authorizations = value;
    }
  }

  public bool Reversed
  {
    get
    {
      return _reversed;
    }
    set
    {
      __isset.reversed = true;
      this._reversed = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool startRow;
    public bool stopRow;
    public bool columns;
    public bool caching;
    public bool maxVersions;
    public bool timeRange;
    public bool filterString;
    public bool batchSize;
    public bool attributes;
    public bool authorizations;
    public bool reversed;
  }

  public TScan()
  {
    this._maxVersions = 1;
    this.__isset.maxVersions = true;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              StartRow = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              StopRow = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                Columns = new List<TColumn>();
                TList _list53 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i54 = 0; _i54 < _list53.Count; ++_i54)
                {
                  TColumn _elem55;
                  _elem55 = new TColumn();
                  await _elem55.ReadAsync(iprot, cancellationToken);
                  Columns.Add(_elem55);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Caching = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              MaxVersions = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Struct)
            {
              TimeRange = new TTimeRange();
              await TimeRange.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              FilterString = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I32)
            {
              BatchSize = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.Map)
            {
              {
                Attributes = new Dictionary<byte[], byte[]>();
                TMap _map56 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i57 = 0; _i57 < _map56.Count; ++_i57)
                {
                  byte[] _key58;
                  byte[] _val59;
                  _key58 = await iprot.ReadBinaryAsync(cancellationToken);
                  _val59 = await iprot.ReadBinaryAsync(cancellationToken);
                  Attributes[_key58] = _val59;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Struct)
            {
              Authorizations = new TAuthorization();
              await Authorizations.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Bool)
            {
              Reversed = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TScan");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (StartRow != null && __isset.startRow)
      {
        field.Name = "startRow";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(StartRow, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (StopRow != null && __isset.stopRow)
      {
        field.Name = "stopRow";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(StopRow, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Columns != null && __isset.columns)
      {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
          foreach (TColumn _iter60 in Columns)
          {
            await _iter60.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.caching)
      {
        field.Name = "caching";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Caching, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.maxVersions)
      {
        field.Name = "maxVersions";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(MaxVersions, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (TimeRange != null && __isset.timeRange)
      {
        field.Name = "timeRange";
        field.Type = TType.Struct;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await TimeRange.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (FilterString != null && __isset.filterString)
      {
        field.Name = "filterString";
        field.Type = TType.String;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(FilterString, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.batchSize)
      {
        field.Name = "batchSize";
        field.Type = TType.I32;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(BatchSize, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Attributes != null && __isset.attributes)
      {
        field.Name = "attributes";
        field.Type = TType.Map;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
          foreach (byte[] _iter61 in Attributes.Keys)
          {
            await oprot.WriteBinaryAsync(_iter61, cancellationToken);
            await oprot.WriteBinaryAsync(Attributes[_iter61], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Authorizations != null && __isset.authorizations)
      {
        field.Name = "authorizations";
        field.Type = TType.Struct;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Authorizations.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.reversed)
      {
        field.Name = "reversed";
        field.Type = TType.Bool;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(Reversed, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TScan(");
    bool __first = true;
    if (StartRow != null && __isset.startRow)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StartRow: ");
      sb.Append(StartRow);
    }
    if (StopRow != null && __isset.stopRow)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("StopRow: ");
      sb.Append(StopRow);
    }
    if (Columns != null && __isset.columns)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Columns: ");
      sb.Append(Columns);
    }
    if (__isset.caching)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Caching: ");
      sb.Append(Caching);
    }
    if (__isset.maxVersions)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MaxVersions: ");
      sb.Append(MaxVersions);
    }
    if (TimeRange != null && __isset.timeRange)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("TimeRange: ");
      sb.Append(TimeRange== null ? "<null>" : TimeRange.ToString());
    }
    if (FilterString != null && __isset.filterString)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("FilterString: ");
      sb.Append(FilterString);
    }
    if (__isset.batchSize)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("BatchSize: ");
      sb.Append(BatchSize);
    }
    if (Attributes != null && __isset.attributes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Attributes: ");
      sb.Append(Attributes);
    }
    if (Authorizations != null && __isset.authorizations)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Authorizations: ");
      sb.Append(Authorizations== null ? "<null>" : Authorizations.ToString());
    }
    if (__isset.reversed)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Reversed: ");
      sb.Append(Reversed);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

