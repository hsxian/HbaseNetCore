/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



public partial class TAppend : TBase
{
  private Dictionary<byte[], byte[]> _attributes;
  private TDurability _durability;
  private TCellVisibility _cellVisibility;

  public byte[] Row { get; set; }

  public List<TColumnValue> Columns { get; set; }

  public Dictionary<byte[], byte[]> Attributes
  {
    get
    {
      return _attributes;
    }
    set
    {
      __isset.attributes = true;
      this._attributes = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="TDurability"/>
  /// </summary>
  public TDurability Durability
  {
    get
    {
      return _durability;
    }
    set
    {
      __isset.durability = true;
      this._durability = value;
    }
  }

  public TCellVisibility CellVisibility
  {
    get
    {
      return _cellVisibility;
    }
    set
    {
      __isset.cellVisibility = true;
      this._cellVisibility = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool attributes;
    public bool durability;
    public bool cellVisibility;
  }

  public TAppend()
  {
  }

  public TAppend(byte[] row, List<TColumnValue> columns) : this()
  {
    this.Row = row;
    this.Columns = columns;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_row = false;
      bool isset_columns = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Row = await iprot.ReadBinaryAsync(cancellationToken);
              isset_row = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                Columns = new List<TColumnValue>();
                TList _list44 = await iprot.ReadListBeginAsync(cancellationToken);
                for(int _i45 = 0; _i45 < _list44.Count; ++_i45)
                {
                  TColumnValue _elem46;
                  _elem46 = new TColumnValue();
                  await _elem46.ReadAsync(iprot, cancellationToken);
                  Columns.Add(_elem46);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_columns = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Map)
            {
              {
                Attributes = new Dictionary<byte[], byte[]>();
                TMap _map47 = await iprot.ReadMapBeginAsync(cancellationToken);
                for(int _i48 = 0; _i48 < _map47.Count; ++_i48)
                {
                  byte[] _key49;
                  byte[] _val50;
                  _key49 = await iprot.ReadBinaryAsync(cancellationToken);
                  _val50 = await iprot.ReadBinaryAsync(cancellationToken);
                  Attributes[_key49] = _val50;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Durability = (TDurability)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Struct)
            {
              CellVisibility = new TCellVisibility();
              await CellVisibility.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_row)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_columns)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TAppend");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "row";
      field.Type = TType.String;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteBinaryAsync(Row, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "columns";
      field.Type = TType.List;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      {
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
        foreach (TColumnValue _iter51 in Columns)
        {
          await _iter51.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
      }
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (Attributes != null && __isset.attributes)
      {
        field.Name = "attributes";
        field.Type = TType.Map;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Attributes.Count), cancellationToken);
          foreach (byte[] _iter52 in Attributes.Keys)
          {
            await oprot.WriteBinaryAsync(_iter52, cancellationToken);
            await oprot.WriteBinaryAsync(Attributes[_iter52], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.durability)
      {
        field.Name = "durability";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Durability, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (CellVisibility != null && __isset.cellVisibility)
      {
        field.Name = "cellVisibility";
        field.Type = TType.Struct;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await CellVisibility.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TAppend(");
    sb.Append(", Row: ");
    sb.Append(Row);
    sb.Append(", Columns: ");
    sb.Append(Columns);
    if (Attributes != null && __isset.attributes)
    {
      sb.Append(", Attributes: ");
      sb.Append(Attributes);
    }
    if (__isset.durability)
    {
      sb.Append(", Durability: ");
      sb.Append(Durability);
    }
    if (CellVisibility != null && __isset.cellVisibility)
    {
      sb.Append(", CellVisibility: ");
      sb.Append(CellVisibility== null ? "<null>" : CellVisibility.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

