/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;



/// <summary>
/// Represents a single cell and its value.
/// </summary>
public partial class TColumnValue : TBase
{
  private long _timestamp;
  private byte[] _tags;

  public byte[] Family { get; set; }

  public byte[] Qualifier { get; set; }

  public byte[] Value { get; set; }

  public long Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  public byte[] Tags
  {
    get
    {
      return _tags;
    }
    set
    {
      __isset.tags = true;
      this._tags = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool timestamp;
    public bool tags;
  }

  public TColumnValue()
  {
  }

  public TColumnValue(byte[] family, byte[] qualifier, byte[] value) : this()
  {
    this.Family = family;
    this.Qualifier = qualifier;
    this.Value = value;
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_family = false;
      bool isset_qualifier = false;
      bool isset_value = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Family = await iprot.ReadBinaryAsync(cancellationToken);
              isset_family = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Qualifier = await iprot.ReadBinaryAsync(cancellationToken);
              isset_qualifier = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Value = await iprot.ReadBinaryAsync(cancellationToken);
              isset_value = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I64)
            {
              Timestamp = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Tags = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_family)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_qualifier)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_value)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("TColumnValue");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      field.Name = "family";
      field.Type = TType.String;
      field.ID = 1;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteBinaryAsync(Family, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "qualifier";
      field.Type = TType.String;
      field.ID = 2;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteBinaryAsync(Qualifier, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      field.Name = "value";
      field.Type = TType.String;
      field.ID = 3;
      await oprot.WriteFieldBeginAsync(field, cancellationToken);
      await oprot.WriteBinaryAsync(Value, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if (__isset.timestamp)
      {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Tags != null && __isset.tags)
      {
        field.Name = "tags";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(Tags, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString()
  {
    var sb = new StringBuilder("TColumnValue(");
    sb.Append(", Family: ");
    sb.Append(Family);
    sb.Append(", Qualifier: ");
    sb.Append(Qualifier);
    sb.Append(", Value: ");
    sb.Append(Value);
    if (__isset.timestamp)
    {
      sb.Append(", Timestamp: ");
      sb.Append(Timestamp);
    }
    if (Tags != null && __isset.tags)
    {
      sb.Append(", Tags: ");
      sb.Append(Tags);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

